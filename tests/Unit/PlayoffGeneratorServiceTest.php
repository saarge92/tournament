<?php

namespace Tests\Unit;

use App\Interfaces\Playoffs\IPlayoffGeneratorService;
use App\Models\TournamentResult;
use App\Providers\IocProvider;
use App\Repositories\Interfaces\ITournamentRepository;
use PHPUnit\Framework\TestCase;
use Tests\CreatesApplication;

/**
 * Тестирование генерации матчей плей-офф в классе
 * @package Tests\Unit
 */
class PlayoffGeneratorServiceTest extends TestCase
{
    use CreatesApplication;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->createApplication()->register(IocProvider::class);
    }

    /**
     * Тестирование функционала по генерации плей-офф турнира
     * Тестирование метода generatePlayOfForTournament
     */
    public function testGeneratePlayoffForTournament()
    {
        $playoffGeneratorService = $this->getPlayOffGeneratorService();
        $randomTournamentResult = TournamentResult::orderByRaw("RAND()")->first();
        $tournamentRepositoryMock = \Mockery::mock(ITournamentRepository::class);
        $keysForResponseCheckArray = ['quarter_final', 'semifinal',
            'final_tournament', 'third_place_tournament'];

        $response = $playoffGeneratorService->generatePlayOfForTournament($randomTournamentResult->id_tournament);

        $this->assertIsArray($response);
        if (!empty($response)) {
            foreach ($keysForResponseCheckArray as $keyCheck) {
                $this->assertArrayHasKey($keyCheck, $response);
            }
        }

        $tournamentRepositoryMock->shouldReceive('getTournamentById')->with($randomTournamentResult->id_tournament);
    }

    /**
     * Получение зависимости функционала по генерации плей-офф
     * @return IPlayoffGeneratorService Вернем функционал класса PlayoffGeneratorService
     */
    private function getPlayOffGeneratorService(): IPlayoffGeneratorService
    {
        return resolve(IPlayoffGeneratorService::class);
    }
}
