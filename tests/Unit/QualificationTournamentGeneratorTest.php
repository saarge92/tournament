<?php

namespace Tests\Unit;

use App\Interfaces\Tournaments\IQualificationGeneratorService;
use App\Interfaces\Tournaments\IQualificationTournamentService;
use App\Providers\IocProvider;
use App\Repositories\Interfaces\ITournamentRepository;
use PHPUnit\Framework\TestCase;
use Tests\CreatesApplication;

/**
 * Тестирование функционала по генерации турнирных матчей
 * Тестирование класса QualificationGeneratorService
 *
 * @package Tests\Unit
 */
class QualificationTournamentGeneratorTest extends TestCase
{
    use CreatesApplication;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->createApplication()->register(IocProvider::class);
    }

    /**
     * Тестирование генерации квалификационных игр
     * метода generateQualificationGames
     */
    public function testGenerateQualificationGames()
    {
        $qualificationGeneratorService = $this->getQualificationGeneratorService();
        $tournamentRepoMock = \Mockery::mock(ITournamentRepository::class);
        $tournamentResultServiceMock = \Mockery::mock(IQualificationTournamentService::class);

        $response = $qualificationGeneratorService->generateQualificationGames();
        $tournamentRepoMock->shouldReceive('getRandomTournament');
        $tournamentResultServiceMock->shouldReceive('getQualificationTournamentResult');

        $this->assertIsArray($response);
        $this->assertArrayHasKey('tables', $response);
        $this->assertArrayHasKey('tournament_id', $response);
        $this->assertArrayHasKey('tournament_name', $response);
        $this->assertIsArray($response['tables']);

        foreach ($response['tables'] as $table) {
            $this->assertArrayHasKey('results', $table);
            $this->assertArrayHasKey('division_id', $table);
            $this->assertArrayHasKey('division_name', $table);
        }
    }

    /**
     * Получение функционала класса QualificationGeneratorService
     * @return IQualificationGeneratorService
     */
    private function getQualificationGeneratorService(): IQualificationGeneratorService
    {
        return resolve(IQualificationGeneratorService::class);
    }
}
